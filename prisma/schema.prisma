// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUM Types
enum BloodType {
  A
  B
  AB
  O
}

enum Gender {
  Laki_laki
  Perempuan
}

enum EncounterType {
  IGD
  Rawat_Jalan
  Rawat_Inap
}

enum TriageLevel {
  Merah
  Kuning
  Hijau
  Hitam
}

enum PatientPosition {
  Berdiri
  Duduk
  Berbaring
}

enum DispositionStatusType {
  Pulang
  Dirujuk
  Rawat_Inap
  Meninggal
}

enum StaffRole {
  Dokter
  Perawat
  Admin
}

enum ExaminationType {
  Laboratorium
  Radiologi
  Penunjang_Lain
}

model Patients {
  patient_id                 String    @id @default(uuid()) @db.Uuid
  patient_name               String
  nik                        String    @unique
  date_of_birth              DateTime
  blood_type                 BloodType?
  gender                     Gender
  patient_history_of_allergies String?
  phone_number               String
  patient_disease_history    String?
  emergency_contact_name     String
  emergency_contact_phonenumber String
  created_at                 DateTime  @default(now()) @db.Timestamptz
  updated_at                 DateTime  @default(now()) @db.Timestamptz

  medical_record MedicalRecord?
}

model MedicalRecord {
  medical_record_id String    @id @default(uuid()) @db.Uuid
  patient_id        String    @unique @db.Uuid
  created_at        DateTime  @default(now()) @db.Timestamptz
  updated_at        DateTime  @default(now()) @db.Timestamptz

  patient   Patients    @relation(fields: [patient_id], references: [patient_id])
  encounters Encounter[]
}

model MedicStaff {
  staff_id         String    @id @default(uuid()) @db.Uuid
  auth_user_id     String?   @unique @db.Uuid
  staff_name       String
  staff_email      String    @unique
  role             StaffRole

  vital_signs      VitalSign[]    @relation("VitalSignStaff")
  treatments       Treatment[]     @relation("TreatmentStaff")
  encounters       Encounter[]     @relation("EncounterStaff")
  soap_notes       SoapNote[]      @relation("SoapNoteResponsible")
  soap_notes_updated SoapNote[]    @relation("SoapNoteUpdated")
  discharge_info   DischargeInformation[]
  diagnoses        Diagnosis[]     @relation("DiagnosisDoctor")
  dispositions     DispositionStatus[]
  diagnostic_tests DiagnosticTest[]
  specializations  DoctorSpecialization[]
}

model Encounter {
  encounter_id          String      @id @default(uuid()) @db.Uuid
  medical_record_id     String      @db.Uuid
  encounter_type        EncounterType
  encounter_start_time  DateTime    @db.Timestamptz
  encounter_end_time    DateTime?   @db.Timestamptz
  chief_complaint       String
  department            String
  triage_level          TriageLevel?
  ward_bed              String?
  responsible_staff_id  String      @db.Uuid
  created_at            DateTime    @default(now()) @db.Timestamptz
  updated_at            DateTime    @default(now()) @db.Timestamptz

  medical_record      MedicalRecord @relation(fields: [medical_record_id], references: [medical_record_id])
  responsible_staff   MedicStaff     @relation("EncounterStaff", fields: [responsible_staff_id], references: [staff_id])
  vital_signs         VitalSign[]
  diagnoses           Diagnosis[]
  treatments          Treatment[]
  soap_notes          SoapNote[]
  discharge_info      DischargeInformation?
  disposition_status  DispositionStatus?
  diagnostic_tests    DiagnosticTest[]
}

model Diagnosis {
  diagnosis_id          String    @id @default(uuid()) @db.Uuid
  encounter_id          String    @db.Uuid
  diagnosis_code        String
  diagnosis_description String?
  timestamp             DateTime  @db.Timestamptz
  doctor_id             String    @db.Uuid
  created_at            DateTime  @default(now()) @db.Timestamptz
  updated_at            DateTime  @default(now()) @db.Timestamptz

  encounter Encounter @relation(fields: [encounter_id], references: [encounter_id])
  doctor    MedicStaff @relation("DiagnosisDoctor", fields: [doctor_id], references: [staff_id])
  icd10     Icd10     @relation(fields: [diagnosis_code], references: [diagnosis_code])
}

model Icd10 {
  diagnosis_code        String    @id
  diagnosis_description String

  diagnoses Diagnosis[]
}

model SoapNote {
  soap_note_id          String    @id @default(uuid()) @db.Uuid
  encounter_id          String    @db.Uuid
  timestamp             DateTime  @db.Timestamptz
  subjective            String?
  objective             String?
  assessment            String?
  plan                  String?
  responsible_staff_id  String    @db.Uuid
  last_updated_by       String?   @db.Uuid
  created_at            DateTime  @default(now()) @db.Timestamptz
  updated_at            DateTime  @default(now()) @db.Timestamptz

  encounter           Encounter @relation(fields: [encounter_id], references: [encounter_id])
  responsible_staff   MedicStaff @relation("SoapNoteResponsible", fields: [responsible_staff_id], references: [staff_id])
  last_updated_by_staff MedicStaff? @relation("SoapNoteUpdated", fields: [last_updated_by], references: [staff_id])
}

model VitalSign {
  vital_sign_id         String          @id @default(uuid()) @db.Uuid
  encounter_id          String          @db.Uuid
  timestamp             DateTime        @db.Timestamptz
  height                Decimal?        @db.Decimal(5,2)
  weight                Decimal?        @db.Decimal(5,2)
  body_temperature      Decimal?        @db.Decimal(4,2)
  systolic_bp           Int?
  diastolic_bp          Int?
  heart_rate            Int?
  respiratory_rate      Int?
  pulse_oximetry        Int?
  position              PatientPosition?
  responsible_staff_id  String?         @db.Uuid
  created_at            DateTime        @default(now()) @db.Timestamptz
  updated_at            DateTime        @default(now()) @db.Timestamptz

  encounter         Encounter @relation(fields: [encounter_id], references: [encounter_id])
  responsible_staff MedicStaff? @relation("VitalSignStaff", fields: [responsible_staff_id], references: [staff_id])
}

model Treatment {
  treatment_id          String    @id @default(uuid()) @db.Uuid
  encounter_id          String    @db.Uuid
  responsible_staff_id  String    @db.Uuid
  treatment_type        String
  procedure_description String
  timestamp             DateTime  @db.Timestamptz
  created_at            DateTime  @default(now()) @db.Timestamptz
  updated_at            DateTime  @default(now()) @db.Timestamptz

  encounter         Encounter @relation(fields: [encounter_id], references: [encounter_id])
  responsible_staff MedicStaff @relation("TreatmentStaff", fields: [responsible_staff_id], references: [staff_id])
}

model DischargeInformation {
  discharge_id       String    @id @default(uuid()) @db.Uuid
  encounter_id       String    @unique @db.Uuid
  discharge_summary  String
  instructions       String
  follow_ups         String?
  approved_staff_id  String    @db.Uuid
  created_at         DateTime  @default(now()) @db.Timestamptz
  updated_at         DateTime  @default(now()) @db.Timestamptz

  encounter       Encounter @relation(fields: [encounter_id], references: [encounter_id])
  approved_staff  MedicStaff @relation(fields: [approved_staff_id], references: [staff_id])
}

model DoctorSpecialization {
  specialization_id     Int     @id @default(autoincrement())
  staff_id              String  @db.Uuid
  specialization_name   String

  staff MedicStaff @relation(fields: [staff_id], references: [staff_id])
}

model DispositionStatus {
  disposition_id        String            @id @default(uuid()) @db.Uuid
  encounter_id          String            @unique @db.Uuid
  disposition_status    DispositionStatusType
  timestamp_disposition DateTime          @db.Timestamptz
  approved_staff_id     String            @db.Uuid
  created_at            DateTime          @default(now()) @db.Timestamptz
  updated_at            DateTime          @default(now()) @db.Timestamptz

  encounter       Encounter @relation(fields: [encounter_id], references: [encounter_id])
  approved_staff  MedicStaff @relation(fields: [approved_staff_id], references: [staff_id])
}

model DiagnosticTest {
  diagnostictests_id    String            @id @default(uuid()) @db.Uuid
  encounter_id          String            @db.Uuid
  type_examination      ExaminationType
  timestamp             DateTime          @db.Timestamptz
  requested_examinations String
  result_summary        String?
  attachments           String?
  responsible_staff_id  String?           @db.Uuid
  created_at            DateTime          @default(now()) @db.Timestamptz
  updated_at            DateTime          @default(now()) @db.Timestamptz

  encounter         Encounter @relation(fields: [encounter_id], references: [encounter_id])
  responsible_staff MedicStaff? @relation(fields: [responsible_staff_id], references: [staff_id])
}